import datetime
from typing import List, Dict, Union

from database import tables


def get_greeting_message():
    message = "–≠—Ç–æ Telegram-–±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å faceit.com.\n" \
              "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–± –∏–≥—Ä–æ–∫–µ –ø–æ –µ–≥–æ –Ω–∏–∫–Ω–µ–π–º—É faceit, –∞ —Ç–∞–∫–∂–µ c—Ä–∞–≤–Ω–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏"
    return message


def get_message_for_player_main_info(player: tables.Player) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–æ–∫–µ"""
    message = f'<b>{player.faceit_nickname}</b>' \
                   f'\nLVL - {player.faceit_lvl}' \
                   f'\nELO - {player.faceit_elo}' \
                   f'\n–ú–∞—Ç—á–µ–π - {player.stats.matches_count}' \
                   f'\nWinrate - {player.stats.winrate}%'
    if player.country == 'ru':
        message += f'\n–°—Ç—Ä–∞–Ω–∞ - üá∑üá∫'
    return message


def get_message_for_player_info(faceit_nickname: str, player: tables.Player) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    message = f'<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {faceit_nickname}:</b>' \
               f'\n–ú–∞—Ç—á–∏ - <b>{player.stats.matches_count}</b>' \
               f'\nLVL - <b>{player.faceit_lvl}</b>' \
               f'\nELO - <b>{player.faceit_elo}</b>' \
               f'\n–ü–æ–±–µ–¥ - <b>{player.stats.wins_count}</b>' \
               f'\nWinrate - <b>{player.stats.winrate}%</b>' \
               f'\n–°—ã–≥—Ä–∞–Ω–æ —Ä–∞—É–Ω–¥–æ–≤ - <b>{player.stats.rounds_count}</b>' \
               f'\n–í—Å–µ–≥–æ —É–±–∏–π—Å—Ç–≤ - <b>{player.stats.kills_count}</b>' \
               f'\n–£–±–∏–π—Å—Ç–≤ –≤ –≥–æ–ª–æ–≤—É - <b>{player.stats.hs_count}</b>' \
               f'{get_emoji_string_new(player.stats.avg_hs_percent, 45, 50, "–ü—Ä–æ—Ü–µ–Ω—Ç —É–±–∏–π—Å—Ç–≤ –≤ –≥–æ–ª–æ–≤—É - <b>{0}%</b> ")}' \
               f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–π—Å–æ–≤ - <b>{player.stats.aces}</b>' \
               f'\nQuadro kills - <b>{player.stats.quadro_kills}</b>' \
               f'\nTriple kills - <b>{player.stats.triple_kills}</b>' \
               f'\nDouble kills - <b>{player.stats.double_kills}</b>' \
               f'\n–û–¥–∏–Ω–æ—á–Ω—ã—Ö —É–±–∏–π—Å—Ç–≤ - <b>{player.stats.single_kills}</b>' \
               f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ—Ä—Ç–µ–π - <b>{player.stats.deaths_count}</b>' \
               f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ MVP - <b>{player.stats.mvps}</b> ‚≠êÔ∏è' \
               f'\n\n<b>–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>' \
               f'{get_emoji_string_new(player.stats.rating_1, 1.05, 1.10, "–†–µ–π—Ç–∏–Ω–≥ 1.0 - <b>{0}</b>")}'\
               f'{get_emoji_string_new(player.stats.avg_kd, 1.0, 1.20, "K/D - <b>{0}</b> ")}' \
               f'{get_emoji_string_new(player.stats.avg_kills, 16, 21, "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–±–∏–π—Å—Ç–≤ - <b>{0}</b> ")}' \
               f'\n–£–±–∏–π—Å—Ç–≤ –∑–∞ —Ä–∞—É–Ω–¥ - <b>{round(player.stats.avg_kpr, 2)}</b>' \
               f'\n–°–º–µ—Ä—Ç–µ–π –∑–∞ —Ä–∞—É–Ω–¥ - <b>{round(1 - player.stats.avg_spr, 2)}</b>'
    return message


def get_text_for_player_matches_handler(faceit_nickname: str, matches: List[tables.Match]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤ 20 –º–∞—Ç—á–∞—Ö"""
    message = f'<b>–ú–∞—Ç—á–∏ {faceit_nickname}:</b>'
    for count, match in enumerate(matches):
        sub_text = f'\n<b>{datetime.datetime.fromtimestamp(match.started_at).strftime("%H:%M %d.%m.%Y")}</b>' \
                    f'\n<b>{count + 1}.</b> <b>{match.map}</b> {match.score} {match.result} | Rating 1.0: {match.rating_1} | K/D: {match.kd} | –£–±–∏–π—Å—Ç–≤: {match.kills} | –°–º–µ—Ä—Ç–µ–π: {match.deaths} | ' \
                   f'–≠–π—Å–æ–≤: {match.aces} | Quadro kills: {match.quadro_kills} | Triple kills: {match.triple_kills} | ' \
                   f'Double kills: {match.double_kills} | HS: {match.hs_percent}% | MVP: {match.mvps}'
        message += sub_text.replace('True', '‚úÖ').replace('False', '‚ùå') + '\n'
    return message


def get_message_for_best_elo_players(players: List[tables.Player]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 10 –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª-–≤—É faciet elo"""
    message = f'<b>–ò–≥—Ä–æ–∫–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º elo:</b>'
    for count, player in enumerate(players):
        sub_text = f'\n{count + 1}. {player.faceit_nickname} - <b>{player.faceit_elo}</b>'
        message += sub_text
    return message


def create_message_for_best_players_in_category(title: str, high: Union[int, float], low: Union[int, float],
                                                players: List[tables.PlayerStats], category: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å 10 –ª—É—á—à–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    message = title
    for count, player in enumerate(players):
        faceit_nickname = player.player.faceit_nickname
        stat = player.__dict__[category]
        sub_text = f'\n{count + 1}. {faceit_nickname} - <b>{stat}</b>'
        if stat > high:
            emoji = ' üî•'
        elif low <= stat <= high:
            emoji = ' ‚úÖ'
        else:
            emoji = ' ‚ùå'
        message += (sub_text + emoji)
    return message


def get_msg_for_stats_last_n_matches(data: Dict, matches_count: int, faceit_nickname: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ n –º–∞—Ç—á–µ–π"""
    message = f'<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {faceit_nickname} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {matches_count} –º–∞—Ç—á–µ–π:</b>'
    message += f'{get_emoji_string_new(data["kd"], 1.0, 1.20, "K/D - <b>{0}</b> ")}' \
               f'{get_emoji_string_new(data["avg_rating_1"], 1.0, 1.15, "–†–µ–π—Ç–∏–Ω–≥ 1.0 - <b>{0}</b> ")}' \
               f'{get_emoji_string_new(data["avg_kills"], 16, 21, "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–±–∏–π—Å—Ç–≤ - <b>{0}</b> ")}' \
               f'\n–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ—Ä—Ç–µ–π - <b>{data["avg_deaths"]}</b>' \
               f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–π—Å–æ–≤ - <b>{data["aces"]}</b>' \
               f'\nQuadro kills - <b>{data["quadro_kills"]}</b>' \
               f'\nTriple kills - <b>{data["triple_kills"]}</b>' \
               f'\nDouble kills - <b>{data["double_kills"]}</b>' \
               f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–±–∏–π—Å—Ç–≤ - <b>{data["kills"]}</b>' \
               f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–±–∏–π—Å—Ç–≤ –≤ –≥–æ–ª–æ–≤—É - <b>{data["hs_count"]}</b>' \
               f'{get_emoji_string_new(data["hs_percent"], 45, 50, "–ü—Ä–æ—Ü–µ–Ω—Ç —É–±–∏–π—Å—Ç–≤ –≤ –≥–æ–ª–æ–≤—É - <b>{0}%</b> ")}' \
               f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ MVP - <b>{data["mvps"]}</b> ‚≠êÔ∏è'
    return message


def get_message_for_compare(stat1: tables.Player, stat2: tables.Player) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –∏–≥—Ä–æ–∫–æ–≤"""
    message = f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ <b>{stat1.faceit_nickname}</b> –∏ <b>{stat2.faceit_nickname}</b>\n'
    rows = [(stat1.stats.matches_count, stat2.stats.matches_count, '\n<b>–ú–∞—Ç—á–∏:</b> {2} {0} - {1} {3}',),
                       (stat1.faceit_elo, stat2.faceit_elo, '\n<b>ELO:</b> {2} {0} - {1} {3}',),
                       (stat1.faceit_lvl, stat2.faceit_lvl,  '\n<b>LVL:</b> {2} {0} - {1} {3}',),
                       (stat1.stats.wins_count, stat2.stats.wins_count, '\n<b>–ü–æ–±–µ–¥:</b> {2} {0} - {1} {3}',),
                       (stat1.stats.winrate, stat2.stats.winrate, '\n<b>Winrate:</b> {2} {0}% - {1}% {3}',),
                       (stat1.stats.rating_1, stat2.stats.rating_1, '\n<b>–†–µ–π—Ç–∏–Ω–≥ 1.0: :</b> {2} {0} - {1} {3}',),
                       (stat1.stats.avg_kd, stat2.stats.avg_kd, '\n<b>–°—Ä–µ–¥–Ω–∏–π K/D:</b> {2} {0} - {1} {3}',),
                       (stat1.stats.kills_count, stat2.stats.kills_count,  '\n<b>–í—Å–µ–≥–æ —É–±–∏–π—Å—Ç–≤:</b> {2} {0} - {1} {3}',),
                       (stat1.stats.avg_hs_percent, stat2.stats.avg_hs_percent, '\n<b>–ü—Ä–æ—Ü–µ–Ω—Ç HS:</b> {2} {0}% - {1}% {3}',),
                       (stat1.stats.aces, stat2.stats.aces, '\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–π—Å–æ–≤:</b> {2} {0} - {1} {3}',),
                       (stat1.stats.quadro_kills, stat2.stats.quadro_kills, '\n<b>Quadro kills:</b> {2} {0} - {1} {3}',),
                       (stat1.stats.triple_kills, stat2.stats.triple_kills, '\n<b>Triple kills:</b> {2} {0} - {1} {3}',),
                       (stat1.stats.double_kills, stat2.stats.double_kills, '\n<b>Double kills:</b> {2} {0} - {1} {3}',),
                       (stat1.stats.deaths_count, stat2.stats.deaths_count, '\n<b>–°–º–µ—Ä—Ç–µ–π:</b> {2} {0} - {1} {3}', 'reverse'),
                       (stat1.stats.mvps, stat2.stats.mvps, '\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ MVP:</b> {2} {0} - {1} {3}',),
                       (stat1.stats.avg_kills, stat2.stats.avg_kills,  '\n<b>–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —É–±–∏–π—Å—Ç–≤:</b> {2} {0} - {1} {3}')]

    for row in rows:
        stat1 = row[0]
        stat2 = row[1]
        if len(row) > 3:
            if stat1 < stat2:
                message += row[2].format(stat1, stat2, '‚úÖ', '‚ùå')
            elif stat1 > stat2:
                message += row[2].format(stat1, stat2, '‚ùå', '‚úÖ')
            else:
                message += row[2].format(stat1, stat2, '', '')
        else:
            if stat1 > stat2:
                message += row[2].format(stat1, stat2, '‚úÖ', '‚ùå')
            elif stat1 < stat2:
                message += row[2].format(stat1, stat2, '‚ùå', '‚úÖ')
            else:
                message += row[2].format(stat1, stat2, '', '')
    return message


def get_emoji_string_new(parameter: Union[int, float], low: Union[int, float], high: Union[int, float], row: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∫–∏ –∑–∞ n –º–∞—Ç—á–µ–π"""
    result = '\n' + row.format(parameter)
    if parameter >= high:
        return result + 'üî•'
    elif low <= parameter < high:
        return result + '‚úÖ'
    return result + '‚ùå'
