import requests
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile
import os

from full_statistic import read_players_nickname_from_file, get_full_stats_for_player
from bot_services.keyboards import cancel_keyboard, main_keyboard, create_players_inline_keyboard, \
    create_players_stats_inline_keyboard, cancel_inline_keyboard, create_back_inline_keyboard
from database.services import get_all_players_nickname_from_db, add_to_database, get_player_info_from_db, \
    get_player_matches_from_db
from bot_services.bot_init import bot


class FSMStart(StatesGroup):
    nickname = State()


async def greeting(message: types.Message):
    await FSMStart.nickname.set()
    await message.answer('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–≤–µ–¥–∏—Ç–µ nickname faceit.', reply_markup=cancel_keyboard)


async def get_nickname_faceit(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['nickname_faceit'] = message.text

    async with state.proxy() as data:
        if data['nickname_faceit'] not in get_all_players_nickname_from_db():
            await message.answer('–ò–¥–µ—Ç —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...üìà')
            player_full_stat = get_full_stats_for_player(data['nickname_faceit'])
            add_to_database(player_full_stat)
            # with open(f'{PLAYERS_LIST}', 'a') as f:
            #     f.write(f'\n{data["nickname_faceit"]}')
            await message.answer('–í–∞—à nickname –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.', reply_markup=main_keyboard)
        else:
            await message.answer('–í–∞—à nickname —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.', reply_markup=main_keyboard)

    await state.finish()


async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer('–û–∫', reply_markup=main_keyboard)


async def all_players_handler(message: types.Message):
    all_nicknames = get_all_players_nickname_from_db()
    await message.answer('–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤', reply_markup=create_players_inline_keyboard(all_nicknames))


def get_player_avatar_path(player):
    if os.path.exists(f'players_avatars/{player.faceit_nickname}.jpeg'):
        return f'players_avatars/{player.faceit_nickname}.jpeg'
    else:
        if player.avatar:
            response = requests.get(player.avatar)
            with open(f'players_avatars/{player.faceit_nickname}.jpeg', 'wb') as fd:
                fd.write(response.content)
            # await save_avatar(player.avatar, player.faceit_nickname)
            return f'players_avatars/{player.faceit_nickname}.jpeg'
        else:
            return 'players_avatars/default.png'


async def player_handler(callback: types.CallbackQuery):
    """–í—ã–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞. Callback.data - <faceit_nickname>"""
    print(callback.data)
    faceit_nickname = callback.data.split('$&*')[1]
    print(faceit_nickname)
    player = get_player_info_from_db(faceit_nickname)
    player_avatar_path = get_player_avatar_path(player)
    text_message = f'{player.faceit_nickname}' \
                   f'\nLVL - {player.faceit_lvl}' \
                   f'\nELO - {player.faceit_elo}' \
                   f'\n–ú–∞—Ç—á–µ–π - {player.stats.matches_count}' \
                   f'\nWinrate - {player.stats.winrate}%'
    await bot.send_photo(callback.message.chat.id,
                         photo=InputFile(player_avatar_path),
                         caption=text_message,
                         reply_markup=create_players_stats_inline_keyboard(faceit_nickname))
    await callback.answer()


async def player_info_handler(callback: types.CallbackQuery):
    """–í—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞. Callback.data - <info$&*nickname>"""
    faceit_nickname = callback.data.split('$&*')[1]
    player = get_player_info_from_db(faceit_nickname)
    text_message = f'{faceit_nickname} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:' \
                   f'\n–ú–∞—Ç—á–µ–π - {player.stats.matches_count}' \
                   f'\nLVL - {player.faceit_lvl}' \
                   f'\nELO - {player.faceit_elo}' \
                   f'\n–ü–æ–±–µ–¥ - {player.stats.wins_count}' \
                   f'\nWinrate - {player.stats.winrate}%' \
                   f'\n–°—ã–≥—Ä–∞–Ω–æ —Ä–∞—É–Ω–¥–æ–≤ - {player.stats.rounds_count}' \
                   f'\n–í—Å–µ–≥–æ —É–±–∏–π—Å—Ç–≤ - {player.stats.kills_count}' \
                   f'\n–£–±–∏–π—Å—Ç–≤ –≤ –≥–æ–ª–æ–≤—É - {player.stats.hs_count}' \
                   f'\n–ü—Ä–æ—Ü–µ–Ω—Ç —É–±–∏–π—Å—Ç–≤ –≤ –≥–æ–ª–æ–≤—É - {player.stats.avg_hs_percent}%' \
                   f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–π—Å–æ–≤ - {player.stats.aces}' \
                   f'\nQuadro kills - {player.stats.quadro_kills}' \
                   f'\nTriple kills - {player.stats.triple_kills}' \
                   f'\nDouble kills - {player.stats.double_kills}' \
                   f'\n–û–¥–∏–Ω–æ—á–Ω—ã—Ö —É–±–∏–π—Å—Ç–≤ - {player.stats.single_kills}' \
                   f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ—Ä—Ç–µ–π - {player.stats.deaths_count}' \
                   f'\n–ü–æ–ª—É—á–µ–Ω–æ MVP –≤ —Ä–∞—É–Ω–¥–∞—Ö - {player.stats.mvps}' \
                   f'\n\n–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:' \
                   f'\nK/D - {player.stats.avg_kd}' \
                   f'\n–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–±–∏–π—Å—Ç–≤ - {player.stats.avg_kills}' \
                   f'\n–£–±–∏–π—Å—Ç–≤ –∑–∞ —Ä–∞—É–Ω–¥ - {round(player.stats.avg_kpr, 2)}' \
                   f'\n–°–º–µ—Ä—Ç–µ–π –∑–∞ —Ä–∞—É–Ω–¥ - {round(1 - player.stats.avg_spr, 2)}'
    await bot.send_message(callback.message.chat.id,
                           text=text_message,
                           reply_markup=create_back_inline_keyboard(faceit_nickname))
    await callback.answer()


async def player_matches_handler(callback: types.CallbackQuery):
    """–í—ã–≤–æ–¥ –º–∞—Ç—á–µ–π –∏–≥—Ä–æ–∫–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞. Callback.data - <matches$&*nickname>"""
    faceit_nickname = callback.data.split('$&*')[1]
    matches = get_player_matches_from_db(faceit_nickname)
    text_message = f'–ú–∞—Ç—á–∏ {faceit_nickname}:'
    for count, match in enumerate(matches):
        sub_text = f'\n{count + 1}. {match.map} | Rating 1.0: {match.rating_1} | K/D: {match.kd} | –£–±–∏–π—Å—Ç–≤: {match.kills} | –°–º–µ—Ä—Ç–µ–π: {match.deaths} | ' \
                   f'–≠–π—Å–æ–≤: {match.aces} | Quadro kills: {match.quadro_kills} | Triple kills: {match.triple_kills} | ' \
                   f'Double kills: {match.double_kills} | HS: {match.hs_percent}% | MVP: {match.mvps}'
        text_message += sub_text
        if count != 19:
            text_message += '\n'

    await bot.send_message(callback.message.chat.id, text=text_message,
                           reply_markup=create_back_inline_keyboard(faceit_nickname))
    await callback.answer()


class FSMMatches(StatesGroup):
    matches_count = State()


async def player_last_stats(callback: types.CallbackQuery):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ n –º–∞—Ç—á–µ–π. Callback.data - <last_stats$&*nickname>"""
    await FSMMatches.matches_count.set()
    msg = await callback.message.answer('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π.', reply_markup=cancel_inline_keyboard)
    # –∑–∞–ø–∏—Å—å –≤ –∫–ª–∞—Å—Å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    FSMMatches.message = msg


async def last_n_matches_message_handler(request: types.Message | types.CallbackQuery, state: FSMContext):
    """–í—ã–≤–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if type(request) == types.Message:
        try:
            int(request.text)
            await FSMMatches.message.delete()
            await request.answer(f'–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {request.text}')
        except ValueError:
            await request.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ')
            return

    elif type(request) == types.CallbackQuery:
        await request.message.delete()
        await bot.send_message(request.message.chat.id, f'Callback data - {request.data}')
        await request.answer()

    await state.finish()


async def cancel_last_n_matches(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await callback.message.delete()
    await callback.message.answer('–û–∫', reply_markup=main_keyboard)


async def empty(message: types.Message):
    await message.answer('–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç.')
    await message.delete()


def register_handlers(dispatcher: Dispatcher):
    dispatcher.register_message_handler(cancel_handler, commands=['–æ—Ç–º–µ–Ω–∞'], state="*")
    dispatcher.register_message_handler(cancel_handler, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    dispatcher.register_message_handler(greeting, commands=['start'], state=None)
    dispatcher.register_message_handler(get_nickname_faceit, state=FSMStart.nickname)

    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    dispatcher.register_message_handler(all_players_handler, Text(equals='–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤', ignore_case=True))

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Ç—á–µ–π
    dispatcher.register_callback_query_handler(cancel_last_n_matches,
                                               lambda callback: callback.data == 'cancel',
                                               state=FSMMatches.matches_count)
    dispatcher.register_message_handler(last_n_matches_message_handler, state=FSMMatches.matches_count)
    dispatcher.register_callback_query_handler(last_n_matches_message_handler,
                                               lambda callback: callback.data.split('_')[0] == 'matchescount',
                                               state=FSMMatches.matches_count)

    # —Ö—ç–Ω–¥–ª–µ—Ä—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–≥—Ä–æ–∫–∞
    dispatcher.register_callback_query_handler(player_info_handler,
                                               lambda callback: callback.data.split('$&*')[0] == 'info')
    dispatcher.register_callback_query_handler(player_matches_handler,
                                               lambda callback: callback.data.split('$&*')[0] == 'matches')
    dispatcher.register_callback_query_handler(player_last_stats,
                                               lambda callback: callback.data.split('$&*')[0] == 'last_stats', state=None)

    # —Ö—ç–≥–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–¥–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
    dispatcher.register_callback_query_handler(player_handler, lambda callback: callback.data.split('$&*')[1] in get_all_players_nickname_from_db())

    # –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dispatcher.register_message_handler(empty)


